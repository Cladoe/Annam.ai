{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"colab":{"provenance":[]},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":102672,"databundleVersionId":12375409,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#Team: Aditi Goel\n#Team Members: \n#1. Aditi Goel (Team Leader)\n#2. Dr. Anil Kumar\n#3. Sonakshi Mehrotra\n#4. Jaya Kamboj","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-23T11:55:17.482617Z","iopub.execute_input":"2025-05-23T11:55:17.482927Z","iopub.status.idle":"2025-05-23T11:55:17.487870Z","shell.execute_reply.started":"2025-05-23T11:55:17.482907Z","shell.execute_reply":"2025-05-23T11:55:17.486712Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# Import necessary libraries\nfrom PIL import Image\nimport os\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-23T11:55:17.489130Z","iopub.execute_input":"2025-05-23T11:55:17.489454Z","iopub.status.idle":"2025-05-23T11:55:17.513980Z","shell.execute_reply.started":"2025-05-23T11:55:17.489428Z","shell.execute_reply":"2025-05-23T11:55:17.512982Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"# Data Reading and Initial Pre-processing\n# Images resized for easier handling\nIMAGE_SIZE = (256, 256)\n\n# Paths\nbase_dir = \"/kaggle/input/soil-classification/soil_classification-2025\"\ntrain_img_dir = os.path.join(base_dir, \"train\")\ntest_img_dir = os.path.join(base_dir, \"test\")\n\n# Load CSVs\ntrain_labels_df = pd.read_csv(os.path.join(base_dir, \"train_labels.csv\"))\ntest_ids_df = pd.read_csv(os.path.join(base_dir, \"test_ids.csv\"))\n\n# Fetch training data with resizing\ntrain_images = []\ntrain_labels = []\n\nfor idx, row in train_labels_df.iterrows():\n    image_filename = row[\"image_id\"]\n    label = row[\"soil_type\"]\n    img_path = os.path.join(train_img_dir, image_filename)\n\n    if os.path.exists(img_path):\n        image = Image.open(img_path).convert(\"RGB\")\n        image = image.resize(IMAGE_SIZE)  # Resize to 256x256\n        train_images.append(np.array(image))\n        train_labels.append(label)\n    else:\n        print(f\"Missing training image: {img_path}\")\n\n# Fetch test data with resizing\ntest_images = []\ntest_image_ids = []\n\nfor idx, row in test_ids_df.iterrows():\n    image_filename = row[\"image_id\"]\n    img_path = os.path.join(test_img_dir, image_filename)\n\n    if os.path.exists(img_path):\n        image = Image.open(img_path).convert(\"RGB\")\n        image = image.resize(IMAGE_SIZE)\n        test_images.append(np.array(image))\n        test_image_ids.append(image_filename)\n    else:\n        print(f\"Missing test image: {img_path}\")\n\nprint(f\"Loaded {len(train_images)} training images and {len(test_images)} test images (resized to 256x256).\")\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AvKXu98ghC1o","outputId":"38d934d1-5d64-49a3-e048-396fd6abb1ce","trusted":true,"execution":{"iopub.status.busy":"2025-05-23T11:55:17.515348Z","iopub.execute_input":"2025-05-23T11:55:17.515659Z","iopub.status.idle":"2025-05-23T11:55:38.133645Z","shell.execute_reply.started":"2025-05-23T11:55:17.515635Z","shell.execute_reply":"2025-05-23T11:55:38.132356Z"}},"outputs":[{"name":"stdout","text":"Loaded 1222 training images and 341 test images (resized to 256x256).\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"# Pre-processing steps followed\n# Step 1: Convert image lists to numpy arrays\nX_train = np.array(train_images)\nX_test = np.array(test_images)\n\n# Step 2: Flatten images (256x256x3 -> 196608) to 1-D arrays\nX_train_flat = X_train.reshape(X_train.shape[0], -1)\nX_test_flat = X_test.reshape(X_test.shape[0], -1)\n\n# Step 3: Encode labels from string to numeric\nlabel_encoder = LabelEncoder()\ny_train_encoded = label_encoder.fit_transform(train_labels)","metadata":{"id":"ij3BZ-ShhC4X","trusted":true,"execution":{"iopub.status.busy":"2025-05-23T11:55:38.134800Z","iopub.execute_input":"2025-05-23T11:55:38.135159Z","iopub.status.idle":"2025-05-23T11:55:38.250670Z","shell.execute_reply.started":"2025-05-23T11:55:38.135128Z","shell.execute_reply":"2025-05-23T11:55:38.249584Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"# Train-Validation Split\nX_train_split, X_val_split, y_train_split, y_val_split = train_test_split(\n    X_train_flat,\n    y_train_encoded,\n    test_size=0.1,   #90% train - 10% validation split\n    random_state=42,\n    stratify=y_train_encoded  #stratifying for uniform data division in train & validation datasets\n)\n\nprint(f\"Train size: {X_train_split.shape[0]}\")\nprint(f\"Validation size: {X_val_split.shape[0]}\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7aY-lyaJry32","outputId":"d69b7174-6ac0-4be0-9a25-141f3f29b76e","trusted":true,"execution":{"iopub.status.busy":"2025-05-23T11:55:38.252544Z","iopub.execute_input":"2025-05-23T11:55:38.253200Z","iopub.status.idle":"2025-05-23T11:55:38.342932Z","shell.execute_reply.started":"2025-05-23T11:55:38.253175Z","shell.execute_reply":"2025-05-23T11:55:38.341666Z"}},"outputs":[{"name":"stdout","text":"Train size: 1099\nValidation size: 123\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"# CLASSIFICATION USING RANDOM FOREST MODEL\n\n# Initialize the Random Forest model\nrf_model = RandomForestClassifier(n_estimators=25, random_state=42)\n\n# Train the model\nrf_model.fit(X_train_split, y_train_split)\n\n# Predict on the test set\ny_pred_rf = rf_model.predict(X_val_split)\n\n# Evaluate the model\nprint(\"Random Forest Classification Report:\\n\", classification_report(y_val_split, y_pred_rf))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_val_split, y_pred_rf))\nprint(\"Accuracy Score:\", accuracy_score(y_val_split, y_pred_rf))\n","metadata":{"id":"hoL3uG6XvGMN","colab":{"base_uri":"https://localhost:8080/"},"outputId":"1c277bbb-cdfb-47a8-e56f-1945c23ddbe0","trusted":true,"execution":{"iopub.status.busy":"2025-05-23T11:55:38.343776Z","iopub.execute_input":"2025-05-23T11:55:38.344158Z","iopub.status.idle":"2025-05-23T11:55:43.348532Z","shell.execute_reply.started":"2025-05-23T11:55:38.344072Z","shell.execute_reply":"2025-05-23T11:55:43.347607Z"}},"outputs":[{"name":"stdout","text":"Random Forest Classification Report:\n               precision    recall  f1-score   support\n\n           0       0.96      1.00      0.98        53\n           1       1.00      0.96      0.98        23\n           2       1.00      1.00      1.00        20\n           3       1.00      0.96      0.98        27\n\n    accuracy                           0.98       123\n   macro avg       0.99      0.98      0.99       123\nweighted avg       0.98      0.98      0.98       123\n\nConfusion Matrix:\n [[53  0  0  0]\n [ 1 22  0  0]\n [ 0  0 20  0]\n [ 1  0  0 26]]\nAccuracy Score: 0.983739837398374\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"# PREDICTION ON NEW DATA (TEST DATA)\n# Step 1: Predict on the flattened test data\ntest_predictions_encoded = rf_model.predict(X_test_flat)\n\n# Step 2: Decode the predictions\ntest_predictions_labels = label_encoder.inverse_transform(test_predictions_encoded)\n\n# Step 3: Create a submission DataFrame\nsubmission_df = pd.DataFrame({\n    \"image_id\": test_image_ids,\n    \"soil_type\": test_predictions_labels\n})\n\n# Display the first few rows of the submission DataFrame\nprint(\"\\nSubmission DataFrame (first 5 rows):\")\nprint(submission_df.head())\n\n# Save the submission DataFrame to a CSV file\nsubmission_df.to_csv(\"submission.csv\", index=False)\nprint(\"\\nSubmission file created: submission.csv\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fQ_Ezljqry6f","outputId":"8b2c1ca2-41a3-476a-fab5-52eef24dff5f","trusted":true,"execution":{"iopub.status.busy":"2025-05-23T11:55:43.349553Z","iopub.execute_input":"2025-05-23T11:55:43.349877Z","iopub.status.idle":"2025-05-23T11:55:43.473569Z","shell.execute_reply.started":"2025-05-23T11:55:43.349850Z","shell.execute_reply":"2025-05-23T11:55:43.472569Z"}},"outputs":[{"name":"stdout","text":"\nSubmission DataFrame (first 5 rows):\n            image_id      soil_type\n0  img_cdf80d6f.jpeg  Alluvial soil\n1   img_c0142a80.jpg  Alluvial soil\n2   img_91168fb0.jpg  Alluvial soil\n3   img_9822190f.jpg  Alluvial soil\n4  img_e5fc436c.jpeg  Alluvial soil\n\nSubmission file created: submission.csv\n","output_type":"stream"}],"execution_count":30}]}